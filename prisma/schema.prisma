// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Beat {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  name       String
  bpm        Int
  songKey    String
  audioSrc   String
  purchased  Boolean
  genre      String
  length     Float
  producerId String
  producer   Producer      @relation(fields: [producerId], references: [id])
  orderId    String?
  order      Order?        @relation("OrderBeats", fields: [orderId], references: [id], onDelete: SetNull)
  licenses   BeatLicense[]
}

model BeatLicense {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  beatId          String
  beat            Beat          @relation(fields: [beatId], references: [id], onDelete: Cascade)
  price           Float
  stripePriceId   String
  licenseOptionId String
  licenseOption   LicenseOption @relation(fields: [licenseOptionId], references: [id])
  download        Download?
}

model LicenseOption {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  basePrice    Float         @default(0)
  contents     String[]
  usageTerms   String[]
  beatLicenses BeatLicense[]
}

model Producer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  surname   String
  lastname  String
  username  String   @unique
  email     String   @unique
  password  String
  beats     Beat[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  address   String
  orders    Order[]
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Float
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  beat      Beat[]   @relation("OrderBeats")
}

model Download {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  url          String
  licenseId    String         @unique
  license      BeatLicense    @relation(fields: [licenseId], references: [id])
  DownloadLink DownloadLink[]
}

model DownloadLink {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  expiresAt  DateTime @default(dbgenerated("now() + interval '48 hours'"))
  downloadId String
  download   Download @relation(fields: [downloadId], references: [id])
}
